
import pygame as pg
import os, time, random
import math

##가보자고

WIDTH = 640
HEIGHT = 480
FPS = 60
DEFAULT_FONT = "NanumGothic.otf"

GRAY = (200, 200, 200)
WHITE = (238, 238, 238)     ### color setting
BLACK = (32, 36, 32)
RED = (246, 36, 74)
BLUE = (32, 105, 246)
ALPHA_MAX = 255


# Game 클래스 (전체 흐름 담당)
class Game:
    def __init__(self):
        pg.init() # pygame 초기화
        pg.mixer.init() # 이것도 초기화

        self.prev_mode = -1 # 이전 모드를 저장할 변수

        self.screen = pg.display.set_mode((640, 480))  # 창 크기 설정
        pg.display.set_caption("파이썬 리듬게임")  # 창 제목 설정
        self.clock = pg.time.Clock()  # 시간 측정용 시계
        self.start_tick = 0  # 게임 시작 시간

        self.running = True  # 게임 전체가 켜져 있는지
        self.playing = False  # 한 판 게임 중인지
        self.screen_mode = 0  # 화면 상태 (0: 로고, 1: 메인, 2: 선택 등)
        self.screen_value = [0, 0, 0, 0]  # 화면 관련 애니메이션 등에 쓰일 값. 쓸거면 이거 가져가셈. 필요시 수정 가능

        self.song_select = 1  # 선택된 노래 번호

        # D 파트 관련
        self.all_sprites = pg.sprite.Group()
        self.shots = pg.sprite.Group()
        self.song_index = 0
        self.song_data = [
            ["1000", "W", "0", "D"],
            ["2000", "B", "0", "U"],
            ["3000", "R", "0", "L"],
            ["4000", "D", "0", "R"]
        ]
        self.score = 0

        # B 파트 함수들
        self.load_date()  # 리소스 (폰트, 이미지, 사운드, 곡 정보 등) 불러오기
        self.new()  # 게임 변수들 초기화 (스프라이트 그룹, 점수 등)
        self.load_songData()  # 곡 데이터(.ini 파일) 읽어와서 self.song_data 채우기

        self.circle_dir = 1  # 현재 방향 (1: 아래, 2: 오른쪽, 3: 위, 4: 왼쪽)
        self.circle_rot = 0  # 회전 각도

    def run(self):
        self.playing = True
        while self.playing:
            self.clock.tick(60) # 60프레임
            self.events() # 이벤트 처리
            self.update() # 상태 갱신
            self.draw() # C가 할거. 화면 그리기가 이거임 ㅇㅇ

        pg.mixer.music.fadeout(600) # 음악 천천히 꺼지기

    def events(self): # 이벤트 함수
        for event in pg.event.get(): # 감지한 모든 이벤트 확인
            if event.type == pg.QUIT: # 나가기
                self.playing = False
                self.running = False
            elif event.type == pg.KEYDOWN:  # 키보드 키가 눌렸을 때
                if event.key == pg.K_ESCAPE: # ESC 키를 누르면 창 닫힘
                    self.playing = False
                elif event.key == pg.K_RETURN: # Enter키로 일단 해둠
                    if self.screen_mode == 1: # 메인에서 곡 선택으로
                        self.screen_mode = 2
                        print("곡 선택 화면으로 이동")
                    elif self.screen_mode == 2: # 곡 선택에서 플레이 시작으로
                        self.screen_mode = 3
                        self.song_index = 0
                        self.start_tick = pg.time.get_ticks() # 시간 재는거
                        self.new()
                        self.load_songData()
                        pg.mixer.music.load(self.song_path[self.song_select-1])
                        pg.mixer.music.play()
                        print("플레이 시작")
                    elif self.screen_mode == 4: # 결과에서 메인 메뉴로
                        self.screen_mode = 1
                        print("메인 메뉴로 돌아감")
                elif event.type == pg.KEYDOWN: # 곡 선택
                    if self.screen_mode == 2:
                        if event.key == pg.K_UP:
                            if self.song_select > 1:
                                self.song_select -= 1
                        elif event.key == pg.K_DOWN:
                            if self.song_select < self.song_num:
                                self.song_select += 1
                    elif self.screen_mode == 3:
                        if event.key == pg.K_LEFT:
                            self.circle_dir += 1
                        elif event.key == pg.K_RIGHT:
                            self.circle_dir -= 1

                    if self.circle_dir > 4: # 원 위치
                        self.circle_dir = 1
                    elif self.circle_dir < 1:
                        self.circle_dir = 4


    def update(self): # 업데이트 함수
        current_tick = pg.time.get_ticks() # 지금 시점 시간 (단위: 밀리초)
        self.elapsed_time = current_tick - self.start_tick # 시작 시점과의 차이
        self.game_tick = self.elapsed_time  # 타이밍 비교용 게임 시간



        # 화면 모드에 따른 처리 분기
        if self.screen_mode == 0:
            # 로고 화면 → 3초 지나면 자동으로 메인으로 넘어감
            if self.elapsed_time > 3000: #단위 밀리초라서 이럼
                self.screen_mode = 1
                print("→ 메인 메뉴로 이동")
        elif self.screen_mode == 3:
            # 플레이 화면
            self.create_shot()
            self.all_sprites.update()
            # 음악이 끝났다면 결과 화면으로 전환
            if self.screen_mode == 3 and not pg.mixer.music.get_busy():
                print("음악 재생 종료 → 결과 화면으로 이동")
                self.screen_mode = 4

        if self.prev_mode != self.screen_mode:
            if self.screen_mode == 3:
                self.start_tick = pg.time.get_ticks()
                self.elapsed_time = 0
                self.song_index = 0  # 노트 인덱스 초기화
                self.shots.empty()  # 이전 노트들 제거
                self.all_sprites.empty()
                self.score = 0  # 점수 초기화

                # 노트 데이터도 다시 로드 (이미 되어 있다면 생략 가능)
                self.load_songData()

                print('> 플레이 시작! 노트 초기화 완료')
            self.prev_mode = self.screen_mode # 이전 모드 갱신

        # 원하는 각도
        target_angle = (self.circle_dir - 1) * 90

        # 현재 각도에서 목표 각도로 부드럽게 회전
        diff = (target_angle - self.circle_rot) % 360
        if diff > 180:
            diff -= 360
        if abs(diff) > 5:
            self.circle_rot += diff * 0.2
        else:
            self.circle_rot = target_angle

        # 0~360 유지
        self.circle_rot %= 360

    def draw(self):
        self.background = pg.Surface((WIDTH, HEIGHT))  # 휜 배경
        self.background = self.background.convert()
        self.background.fill(WHITE)
        self.screen.blit(self.background, (0, 0))
        self.draw_screen()
        self.all_sprites.draw(self.screen)
        pg.display.update()


    def create_shot(self):
        if self.game_tick >= self.song_data[self.song_dataIndex][0]:
            if self.song_data[self.song_dataIndex][1] != -1:
                shot_num = len(self.song_data[self.song_dataIndex]) - 1

                for shot in range(shot_num):
                    shot_data = self.song_data[self.song_dataIndex][shot + 1]

                    obj_shot = Shot(self, shot_data[0], shot_data[1], shot_data[2], shot_data[3])
                    self.all_sprites.add(obj_shot)
                    self.shots.add(obj_shot)

                self.song_dataIndex += 1
            else:
                if self.score >= self.song_highScore[self.song_select - 1]:
                    with open(self.song_dataPath[self.song_select - 1], "r", encoding='UTF-8') as file:
                        file_lists = file.read().split('\n')

                    file_list = 'score:' + str(self.score) + ':' + str(
                        self.song_perfectScore[self.song_select - 1]) + '\n'

                    for shot_file in file_lists:
                        if shot_file != '' and shot_file[0] != 's':
                            file_list += '\n' + shot_file

                    with open(self.song_dataPath[self.song_select - 1], 'w+', encoding='UTF-8') as song_file:
                        song_file.write(file_list)

                    self.song_highScore[self.song_select - 1] = self.score

                self.screen_value[1] = 1

    def load_date(self):  # 데이터 로딩 함수 시작
        # 현재 실행 중인 파이썬 파일의 디렉토리 경로를 가져와서 self.dir에 저장
        # 이 경로를 기준으로 다른 리소스 파일들의 위치 탐색
        self.dir = os.path.dirname(__file__)

        ### font (폰트 관련 설정 및 로딩)
        # 폰트 파일들이 있는 하위 디렉토리 경로를 설정
        self.fnt_dir = os.path.join(self.dir, 'font')
        # 게임에서 사용할 기본 폰트 파일의 전체 경로를 설정
        self.gameFont = os.path.join(self.fnt_dir, DEFAULT_FONT)

        ### image (이미지 관련 설정 및 로딩)
        # 이미지 파일들이 있는 하위 디렉토리 경로를 설정
        self.img_dir = os.path.join(self.dir, 'image')
        # 게임 창의 아이콘 이미지를 불러와서 설정해.
        pg.display.set_icon(pg.image.load(os.path.join(self.img_dir, 'icon.png')))  # 아이콘 설정
        # 'printed.png' 이미지를 불러와서 self.spr_printed 변수에 저장
        self.spr_printed = pg.image.load(os.path.join(self.img_dir, 'printed.png'))
        # 'logoback.png' 이미지를 불러와서 self.spr_logoback 변수에 저장
        self.spr_logoback = pg.image.load(os.path.join(self.img_dir, 'logoback.png'))
        # 'logo.png' 이미지를 불러와서 self.spr_logo 변수에 저장
        self.spr_logo = pg.image.load(os.path.join(self.img_dir, 'logo.png'))
        # 'circle.png' 이미지를 불러와서 self.spr_circle 변수에 저장
        self.spr_circle = pg.image.load(os.path.join(self.img_dir, 'circle.png'))
        # 'shot.png' 이미지를 스프라이트 시트(여러 이미지가 합쳐진 파일)로 부르기
        # Spritesheet 클래스는 이 파일에서 필요한 부분을 잘라 쓰는 데 사용됨
        self.spr_shot = Spritesheet(os.path.join(self.img_dir, 'shot.png'))

        ### sound (사운드 관련 설정 및 로딩)
        # 사운드 파일들이 있는 하위 디렉토리 경로를 설정
        self.snd_dir = os.path.join(self.dir, 'sound')
        # 메인 배경 음악 파일 경로를 설정 (로딩x)
        self.bg_main = os.path.join(self.snd_dir, 'bg_main.ogg')
        # 'click.ogg' 효과음 파일을 불러와서 self.sound_click 변수에 저장
        self.sound_click = pg.mixer.Sound(os.path.join(self.snd_dir, 'click.ogg'))
        # 'drum1.ogg' 효과음 파일을 불러와서 self.sound_drum1 변수에 저장
        self.sound_drum1 = pg.mixer.Sound(os.path.join(self.snd_dir, 'drum1.ogg'))
        # 'drum2.ogg' 효과음 파일을 불러와서 self.sound_drum2 변수에 저장
        self.sound_drum2 = pg.mixer.Sound(os.path.join(self.snd_dir, 'drum2.ogg'))
        # 'drum3.ogg' 효과음 파일을 불러와서 self.sound_drum3 변수에 저장
        self.sound_drum3 = pg.mixer.Sound(os.path.join(self.snd_dir, 'drum3.ogg'))
        # 'drum4.ogg' 효과음 파일을 불러와서 self.sound_drum4 변수에 저장
        self.sound_drum4 = pg.mixer.Sound(os.path.join(self.snd_dir, 'drum4.ogg'))

        ### song (곡 관련 설정 및 로딩)
        # 곡 파일들이 있는 하위 디렉토리 경로를 설정
        self.sng_dir = os.path.join(self.dir, 'song')
        # 지원하는 음악 파일 확장자 목록을 정의
        music_type = ["ogg", "mp3", "wav"]
        # song 디렉토리 안의 파일 목록을 가져와서, 확장자가 music_type에 포함되는 파일들만 걸러내 리스트로 만들기
        song_lists = [i for i in os.listdir(self.sng_dir) if i.split('.')[-1] in music_type]
        # 게임에서 사용할 수 있는 곡들의 이름을 저장할 빈 리스트
        self.song_list = list()  # 곡 이름 리스트
        # 게임에서 사용할 수 있는 곡 파일들의 전체 경로를 저장할 빈 리스트
        self.song_path = list()  # 곡 파일 경로 리스트

        self.spr_circle = pg.image.load(os.path.join(self.img_dir, 'circle.png')).convert_alpha()


        # song_lists 목록에 있는 각 곡 파일(song)에 대해 반복하면서 처리
        for song in song_lists:
            # try-except 블록으로 파일 로딩 중 발생할 수 있는 오류 처리
            try:
                # Pygame 믹서에 현재 곡 파일을 임시로 로드
                # 이는 파일이 유효한 음악 파일인지 확인하는 과정
                pg.mixer.music.load(os.path.join(self.sng_dir, song))
                # 파일 확장자를 제외한 파일 이름만 가져와서 곡 이름 리스트(self.song_list)에 추가
                self.song_list.append(song.split('.')[0])
                # 곡 파일의 전체 경로를 곡 경로 리스트(self.song_path)에 추가
                self.song_path.append(os.path.join(self.sng_dir, song))
            except:
                # 만약 파일을 로드하는 데 실패하면 (지원하지 않는 형식 등) 오류 메시지를 출력
                print("error: " + str(song) + "is unsupported format music file.")

        # 성공적으로 로드된 곡들의 개수를 세어서 self.song_num에 저장
        self.song_num = len(self.song_list)  # 사용 가능한 곡 개수
        # 각 곡에 해당하는 데이터 파일(.ini)의 경로를 저장할 빈 리스트를 만들
        self.song_dataPath = list()  # 곡 데이터 파일 경로 리스트
        # 각 곡의 최고 점수를 저장할 빈 리스트를 만들
        self.song_highScore = list()  # 곡 최고 점수 리스트
        # 각 곡의 만점(퍼펙트 점수)을 저장할 빈 리스트를 만들
        self.song_perfectScore = list()  # 곡 만점 리스트

        # 이제 성공적으로 로드된 곡 이름 리스트(self.song_list)에 있는 각 곡(song)에 대해 반복
        for song in self.song_list:
            # 각 곡 이름에 '.ini' 확장자를 붙여서 해당 곡의 데이터 파일 경로 만들기
            song_dataCoord = os.path.join(self.sng_dir, song + ".ini")

            # try-except 블록으로 데이터 파일 로딩 중 발생할 수 있는 오류 처리
            try:
                # 해당 곡의 데이터 파일(.ini)을 UTF-8 인코딩으로 열어서 읽어와.
                with open(song_dataCoord, "r", encoding='UTF-8') as song_file:
                    # 파일 내용을 전부 읽고 줄바꿈('\n')으로 나눈 후, 첫 번째 줄만 가져오기
                    # 첫 번째 줄에는 보통 최고 점수와 만점 정보가 저장됨
                    song_scoreList = song_file.read().split('\n')[0]

                # 첫 번째 줄을 ':'를 기준으로 나눠서 두 번째 값(인덱스 1)을 정수로 변환하여 최고 점수 리스트에 추가
                self.song_highScore.append(int(song_scoreList.split(':')[1]))
                # 첫 번째 줄을 ':'를 기준으로 나눠서 세 번째 값(인덱스 2)을 정수로 변환하여 만점 리스트에 추가
                self.song_perfectScore.append(int(song_scoreList.split(':')[2]))
                # 데이터 파일의 전체 경로를 곡 데이터 경로 리스트에 추가
                self.song_dataPath.append(song_dataCoord)
            except:
                # 만약 데이터 파일이 없거나 손상되었으면 오류 메시지를 출력
                print("error: " + str(song) + "'s song data file is damaged or does not exist.")
                # 해당 곡의 최고 점수와 만점, 데이터 경로를 -1로 설정해서 오류가 있음을 표시
                self.song_highScore.append(-1)
                self.song_perfectScore.append(-1)
                self.song_dataPath.append(-1)


    # 곡 데이터 불러오기 함수
    def load_songData(self):  # ini 파일에서 곡 데이터 읽기
        self.song_data = []
        data_path = self.song_dataPath[self.song_select - 1]
        try:
            with open(data_path, "r", encoding="utf-8") as f:
                lines = f.read().split("\n")
            for line in lines:
                if line and not line.startswith("s"):
                    time_str, notes_str = line.split(" - ")
                    m, s, ms = map(int, time_str.split(":"))
                    time_ms = m * 60000 + s * 1000 + ms * 10
                    notes = notes_str.split(", ")
                    parsed_notes = []
                    for note in notes:
                        if note[0] == "E":
                            parsed_notes.append(-1)
                        else:
                            color = note[0]
                            mode = int(note[1])
                            direction = note[2]
                            speed = int(note[3])
                            parsed_notes.append((color, mode, direction, speed))
                    self.song_data.append([time_ms] + parsed_notes)
            self.song_dataLen = len(self.song_data)
            self.song_index = 0
        except Exception as e:
            print("곡 데이터 로딩 실패:", e)

        self.song_index = 0
        self.song_dataIndex = 0

    def new(self):  ########################## Game Initialize (게임 초기화 함수 시작)
        # 현재 플레이할 곡의 데이터를 저장할 빈 리스트 만들기
        self.song_data = list()  # 곡 데이터 리스트

        # 곡 데이터의 총 길이를 저장할 변수를 0으로 초기화
        self.song_dataLen = 0  # 곡 데이터 길이이

        # 현재 곡 데이터에서 몇 번째 데이터를 처리 중인지 나타내는 인덱스를 0으로 초기화
        # 게임이 진행되면서 이 값이 증가하며 다음 투사체 정보를 가져옴
        self.song_dataIndex = 0  # 곡 데이터 인덱스

        # 중앙 원(circle)의 현재 방향 값을 1로 초기화
        # 이 값은 투사체의 색상이나 방향과 연관되어 게임 로직에 사용됨
        self.circle_dir = 1  # 원 방향 값 (기준: 하양 / 아래, 오른쪽, 위, 왼쪽 == 1, 2, 3, 4)

        # 중앙 원의 회전 각도를 0으로 초기화
        # 이 값은 원의 시각적인 회전을 제어하는 데 사용됨
        self.circle_rot = 0  # 원 회전 값

        # 현재 게임의 점수를 0으로 초기화
        self.score = 0  # 현재 게임 점수

        # 게임 화면에 표시될 모든 스프라이트(캐릭터, 투사체, 효과 등)를 관리하는 그룹
        self.all_sprites = pg.sprite.Group()  # 전체 스프라이트 그룹

        # 특히 플레이어가 맞춰야 하는 투사체(shot)들만 따로 관리하는 그룹
        # 이 그룹은 충돌 감지나 투사체 관련 로직에 사용됨
        self.shots = pg.sprite.Group()  # 투사체 스프라이트 그룹

    def load_songData(self):  ########################## 곡 데이터 로딩 함수
        # 현재 선택된 곡의 데이터 파일 경로(self.song_dataPath[self.song_select - 1])를
        # UTF-8 인코딩으로 열어서 읽기
        with open(self.song_dataPath[self.song_select - 1], "r", encoding='UTF-8') as data_file:
            # 파일 내용을 전부 읽고 줄바꿈('\n')을 기준으로 나눠서 리스트로 만들기
            # 각 줄은 게임 플레이 중 투사체가 나타나는 시간과 정보를 담고 있음
            data_fileLists = data_file.read().split('\n')
        # 파일에서 읽어온 각 줄(data_line)을 반복하면서 처리
        for data_line in data_fileLists:
            # 줄이 비어있지 않고 's'로 시작하지 않으면 (스코어 정보 줄은 제외)
            if data_line != "" and data_line[0] != 's':  # 's'로 시작하는 줄(스코어)은 제외
                # 줄을 ' - '를 기준으로 나눠서 시간 정보와 투사체 정보로 분리
                data_fileList = data_line.split(' - ')
                # 시간 정보를 ':'를 기준으로 분:초:1/100초로 분리
                time_list = data_fileList[0].split(':')
                # 투사체 정보를 ', '를 기준으로 분리
                shot_list = data_fileList[1].split(', ')
                # 현재 줄의 데이터를 저장할 임시 리스트
                current_songData = list()
                # 시간 정보를 밀리초(1/1000초) 단위로 계산해서 리스트의 첫 번째 요소로 추가
                # (분 * 60000 + 초 * 1000 + 1/100초 * 10)
                current_songData.append(int(time_list[0]) * 60000 + int(time_list[1]) * 1000 + int(time_list[2]) * 10)

                # 해당 시간에 나타날 각 투사체 정보를 반복하면서 파싱해
                for shot in shot_list:
                    # 투사체 데이터 파싱 (색, 회전, 방향, 속도)
                    # 투사체 정보의 첫 글자로 색상을 판단
                    if shot[0] == 'E':  # 'E'는 END 마커 (투사체 없음)
                        shot_color = -1
                    elif shot[0] == 'W':
                        shot_color = 1  # 'W'는 하양색
                    elif shot[0] == 'B':
                        shot_color = 2  # 'B'는 파랑색
                    elif shot[0] == 'D':
                        shot_color = 3  # 'D'는 검정색
                    else:
                        shot_color = 4  # 그 외 (아마 'R')는 빨강색

                    # END 마커가 아니면 회전, 방향, 속도 정보를 파싱
                    if shot_color != -1:
                        # 투사체 정보의 두 번째 글자로 회전 방향을 판단
                        if shot[1] == 'D':
                            shot_mode = 0  # 'D'는 아래 (0도)
                        elif shot[1] == 'R':
                            shot_mode = 90  # 'R'는 오른쪽 (90도)
                        elif shot[1] == 'U':
                            shot_mode = 180  # 'U'는 위 (180도)
                        else:
                            shot_mode = 270  # 그 외 (아마 'L')는 왼쪽 (270도)

                        # 투사체 정보의 세 번째 글자로 이동 방향을 판단
                        if shot[2] == 'D':
                            shot_dir = 0  # 'D'는 아래 (0도)
                        elif shot[2] == 'R':
                            shot_dir = 90  # 'R'는 오른쪽 (90도)
                        elif shot[2] == 'U':
                            shot_dir = 180  # 'U'는 위 (180도)
                        else:
                            shot_dir = 270  # 그 외 (아마 'L')는 왼쪽 (270도)

                        # 파싱한 색, 회전, 방향, 속도 정보를 튜플로 묶기
                        shot_data = (shot_color, shot_mode, shot_dir, int(shot[3]))  # (색, 회전, 방향, 속도)
                        # 현재 줄의 데이터 리스트에 투사체 정보를 추가
                        current_songData.append(shot_data)
                    else:
                        # END 마커인 경우 -1을 추가
                        shot_data = -1  # END 마커
                        current_songData.append(shot_data)

                # 현재 줄에서 파싱한 모든 데이터(시간 정보와 투사체 정보들)를
                # 최종 곡 데이터 리스트(self.song_data)에 추가
                self.song_data.append(current_songData)


    def draw(self):
        # 플레이 중이면 흰색 배경, 아니면 검정색
        if self.screen_mode == 3:
            self.screen.fill(GRAY)
        else:
            self.screen.fill(BLACK)
        self.all_sprites.draw(self.screen)
        self.draw_ui()
        pg.display.flip()

    def draw_ui(self):
        if self.screen_mode == 0:  # 로고 화면
            self.screen.fill(WHITE)
            try:
                self.screen.blit(self.spr_printed, (
                (WIDTH - self.spr_printed.get_width()) // 2, (HEIGHT - self.spr_printed.get_height()) // 2))
            except AttributeError:
                self.draw_text("RhythmGame", 40, WIDTH // 2, HEIGHT // 2, center=True)
        elif self.screen_mode == 1:
            # 메인 메뉴
            self.draw_text("메인 메뉴", 40, WIDTH // 2, HEIGHT // 2 - 40, center=True)
            self.draw_text("ENTER - 곡 선택", 24, WIDTH // 2, HEIGHT // 2, center=True)

        elif self.screen_mode == 2:
            # 곡 선택 화면
            self.draw_text("곡 선택", 40, WIDTH // 2, HEIGHT // 2 - 80, center=True)

            # 현재 선택된 곡 강조
            y_start = HEIGHT // 2 - 40
            for i, song in enumerate(self.song_list, start=1):
                color = RED if i == self.song_select else WHITE
                self.draw_text(song, 28, WIDTH // 2, y_start + (i - self.song_select) * 30, color=color, center=True)

            self.draw_text("↑↓로 곡 선택", 20, WIDTH // 2, HEIGHT - 60, center=True)
            self.draw_text("ENTER - 플레이 시작", 20, WIDTH // 2, HEIGHT - 30, center=True)

        elif self.screen_mode == 3:
            # 플레이 화면
            self.draw_text(f"점수: {self.score}", 28, 10, 10)

            try:
                rotated_circle = pg.transform.rotate(self.spr_circle, -self.circle_rot)
                rect = rotated_circle.get_rect(center=(WIDTH // 2, HEIGHT // 2))
                self.screen.blit(rotated_circle, rect)
            except AttributeError:
                pg.draw.circle(self.screen, (200, 200, 200), (WIDTH // 2, HEIGHT // 2), 50, 3)

            # 게임 진행 시간 표시
            time_m = self.elapsed_time // 60000
            time_s = (self.elapsed_time // 1000) % 60
            time_str = f"{time_m}:{time_s:02d}"
            self.draw_text(time_str, 28, WIDTH - 120, 10)



        elif self.screen_mode == 4:
            # 결과 화면
            self.draw_text("결과 화면", 40, WIDTH // 2, HEIGHT // 2 - 80, center=True)
            self.draw_text(f"최종 점수: {self.score}", 36, WIDTH // 2, HEIGHT // 2 - 30, center=True)
            self.draw_text("ENTER - 메인으로", 24, WIDTH // 2, HEIGHT // 2 + 30, center=True)

    def draw_text(self, text, size, x, y, color=WHITE, center=False):
        font = pg.font.SysFont("NanumGothic", size)
        text_surface = font.render(text, True, color)
        text_rect = text_surface.get_rect()
        if center:
            text_rect.center = (x, y)
        else:
            text_rect.topleft = (x, y)
        self.screen.blit(text_surface, text_rect)


# Shot 클래스 (노트 오브젝트)
class Shot(pg.sprite.Sprite):  ####################################### Shot Class
    def __init__(self, game, color, mode, direction, speed):  # color(WBDR) mode(DRUL) direction(DRUL)
        pg.sprite.Sprite.__init__(self)
        self.game = game
        self.color = color
        self.mode = mode
        self.direction = direction
        self.speed = speed
        self.alpha = ALPHA_MAX
        self.correct_code = [1, 2, 3, 4]
        self.correct = 0
        image = self.game.spr_shot.get_image((color - 1) * 45, 0, 45, 61)

        if self.mode == 0:
            self.image = pg.transform.rotate(image, 270)
            self.touch_coord = (round(- self.image.get_width() / 2), round(23 - self.image.get_height() / 2))
        elif self.mode == 90:
            self.image = image
            self.touch_coord = (round(23 - self.image.get_width() / 2), round(- self.image.get_height() / 2))
        elif self.mode == 180:
            self.image = pg.transform.rotate(image, 90)
            self.touch_coord = (round(- self.image.get_width() / 2), round(-23 - self.image.get_height() / 2))
        else:
            self.image = pg.transform.rotate(image, 180)
            self.touch_coord = (round(-23 - self.image.get_width() / 2), round(- self.image.get_height() / 2))

        self.image.set_colorkey((0, 0, 0))
        self.rect = self.image.get_rect()
        self.rect.x, self.rect.y = round(WIDTH / 2), round(HEIGHT / 2)

        if self.direction == 0:
            self.rect.y += round(HEIGHT / 2 + 100)
        elif self.direction == 90:
            self.rect.x += round(WIDTH / 2 + 100)
        elif self.direction == 180:
            self.rect.y -= round(HEIGHT / 2 + 100)
        else:
            self.rect.x -= round(WIDTH / 2 + 100)

        self.rect.x += self.touch_coord[0]
        self.rect.y += self.touch_coord[1]

    def rotate_point(self, point, angle_deg):
        """ 기준점을 중심으로 point를 angle_deg만큼 회전 """
        angle_rad = math.radians(angle_deg)
        x, y = point
        cos_a = math.cos(angle_rad)
        sin_a = math.sin(angle_rad)
        rotated_x = x * cos_a - y * sin_a
        rotated_y = x * sin_a + y * cos_a
        return (round(rotated_x), round(rotated_y))

    # Shot 클래스의 update 메소드를 아래 내용으로 교체하세요.


    def update(self):
        # 노트의 투명도(alpha) 설정
        self.image.set_alpha(self.alpha)

        if self.alpha > 0:
            if self.correct == 1:
                self.alpha -= ALPHA_MAX / 5
            else:
                if self.correct == -1:
                    self.alpha -= ALPHA_MAX / 85

                # 방향에 따라 노트 이동
                if self.direction == 0:
                    self.rect.y -= self.speed
                elif self.direction == 90:
                    self.rect.x -= self.speed
                elif self.direction == 180:
                    self.rect.y += self.speed
                else:
                    self.rect.x += self.speed

            # 화면 벗어나면 제거
            if self.rect.x > WIDTH * 2 or self.rect.x < -WIDTH or self.rect.y > HEIGHT * 2 or self.rect.y < -HEIGHT:
                self.kill()
        else:
            self.kill()

        # 판정 (중심 원 기준으로 위치와 방향 비교)
        if self.correct == 0:
            center_x = round(WIDTH / 2) + self.touch_coord[0]
            center_y = round(HEIGHT / 2) + self.touch_coord[1]

            if self.rect.x == center_x and self.rect.y == center_y:
                # 중심 원 방향 코드와 노트 방향(mode) 비교
                # 판정 매핑 테이블: mode -> circle_dir
                mode_to_dir = {0: 1, 90: 2, 180: 3, 270: 4}

                if self.game.circle_dir == mode_to_dir.get(self.mode, -1):
                    # 정확히 맞췄을 때
                    self.game.score += 100
                    self.correct = 1

                    # 색상에 따라 드럼 사운드 재생
                    if self.color == 1:
                        self.game.sound_drum1.play()
                    elif self.color == 2:
                        self.game.sound_drum2.play()
                    elif self.color == 3:
                        self.game.sound_drum3.play()
                    else:
                        self.game.sound_drum4.play()
                else:
                    # 방향이 틀렸을 때
                    self.correct = -1


# 스프라이트 시트 클래스
class Spritesheet:
    # Spritesheet 객체가 처음 만들어질 때 실행되는 초기화 함수
    # filename은 불러올 스프라이트 시트 이미지 파일의 경로를 받아옴옴
    def __init__(self, filename):
        # 지정된 파일 이름(filename)의 이미지를 불러와서 self.spritesheet 변수에 저장
        # .convert()는 이미지 형식을 Pygame이 더 빠르게 처리할 수 있는 형식으로 변환
        self.spritesheet = pg.image.load(filename).convert()

    # 스프라이트 시트에서 특정 영역의 이미지를 잘라내서 반환하는 함수
    # x, y는 잘라낼 영역의 왼쪽 위 모서리 좌표, width, height는 잘라낼 영역의 너비와 높이
    def get_image(self, x, y, width, height):
        # 잘라낼 이미지 크기만큼의 빈 Surface(그림판 같은 것)를 만들음음
        image = pg.Surface((width, height))

        # self.spritesheet (원본 스프라이트 시트 이미지)에서
        # (x, y) 좌표를 시작으로 width x height 크기의 영역을 잘라내서
        # 새로 만든 image Surface의 (0, 0) 위치에 복사(blit)
        image.blit(self.spritesheet, (0, 0), (x, y, width, height))

        # 잘라낸 이미지가 담긴 Surface를 반환
        return image


if __name__ == '__main__': # 이거 메인 함수
    game = Game()
    game.run()
    print('게임 루프 종료됨') # 종료 콘솔창으로 보려고 만든거
